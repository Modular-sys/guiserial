<?xml version="1.0" encoding="UTF-8"?>
<!-- Spring配置的根元素+约束 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 配置注解扫描包位置 -->
    <!--    <context:component-scan base-package="cn.zj.ssm"/>-->

    <!-- 读取db.properties配置文件

        <context:property-placeholder location="classpath:db.properties"/>
            location: 配置文件地址 。必须加上前缀   classpath：
            Spring框架只要读取资源配置文件全部需要加上  classpath: （规则）
    -->
    <context:property-placeholder location="classpath:config/application.properties"/>


    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <!--
            使用SpringEL表达式可以获取  xxx.properties配置文件key对应的值
            语法  ：${key} 读取配置文件的值
                 #{100*200*1024} Spring可以使用算数表达式，运行阶段自动计算值

            注意：
                db.properties配置不能使用 username 作为key，
                    Spring默认读取当前操作系统登录账号
                解决方案：统一价一个前缀即可
         -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!-- 配置SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 1.配置数据源 -->
        <property name="dataSource" ref="dataSource"/>


        <!-- 3.配置包扫描创建别名：pojo包实体类取别名 -->
        <property name="typeAliasesPackage" value="com.robot.generator.app.pojo.entity"/>

    </bean>


    <!-- 使用包扫描创建mapper包下面所有映射接口的代理对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置映射接口的包 -->
        <property name="basePackage" value="com.robot.generator.app.pojo.entity"/>

        <!-- 配置SqlSessionFactory Bean的名称  [可选] -->
        <!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
    </bean>


    <!--
        配置事务思路
        1，配置事务管理器
        2，配置事务通知（事务细节）
        3，使用AOP将事务切入到Service层
     -->

    <!-- 1，配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 2，配置事务通知（事务细节） -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 配置事务通知属性 -->
        <tx:attributes>
            <!-- DQL  -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>

            <!-- DML -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--    &lt;!&ndash; 3，使用AOP将事务切入到Service层 &ndash;&gt;-->
    <!--    <aop:config>-->
    <!--        &lt;!&ndash; 配置切入点  &ndash;&gt;-->
    <!--        <aop:pointcut expression="execution(* cn.zj.ssm.service..*.*(..))" id="pt"/>-->
    <!--        &lt;!&ndash; 配置切面 &ndash;&gt;-->
    <!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>-->
    <!--    </aop:config>-->


</beans>